spring.application.name=api-gateway
# API Gateway uygulamas?n?n ad? "api-gateway" olarak belirleniyor.

eureka.client.serviceUrl.defaultZone=http://eureka:password@localhost:8761/eureka
# Eureka Discovery Server'?n URL'si. Gateway, bu URL üzerinden servis kayd?n? ve ke?fini yapacak.
logging.level.org.springframework.security=DEBUG

logging.level.root = INFO
# Log seviyesini INFO olarak ayarl?yor. Bu, uygulama genelinde önemli olaylar?n kaydedilece?i anlam?na gelir.

logging.level.org.springframework.cloud.gateway.route.RouteDefinitionLocator = INFO
# Spring Cloud Gateway için RouteDefinitionLocator ile ilgili log seviyesini INFO olarak ayarl?yor. Bu, rota tan?mlar? ile ilgili önemli bilgilerin kaydedilmesini sa?lar.

logging.level.org.springframework.cloud.gateway = TRACE
# Spring Cloud Gateway için log seviyesini TRACE olarak ayarl?yor. Bu, daha detayl? log bilgileri alman?z? sa?lar, bu da hata ay?klamada yard?mc? olabilir.

## Product Service Route
spring.cloud.gateway.routes[0].id=product-service
# ?lk rota tan?m? için bir kimlik (id) belirleniyor; bu örnekte "product-service".

spring.cloud.gateway.routes[0].uri=lb://product-service
# Bu rota, yük dengeleme (load balancing) ile "product-service" mikroservisine yönlendirilecektir.

spring.cloud.gateway.routes[0].predicates[0]=Path=/api/product
# Bu rota, gelen isteklerin "/api/product" yoluna uymas? durumunda etkinle?ir.

## Order Service Route
spring.cloud.gateway.routes[1].id=order-service
# ?kinci rota tan?m? için bir kimlik (id) belirleniyor; bu örnekte "order-service".

spring.cloud.gateway.routes[1].uri=lb://order-service
# Bu rota, yük dengeleme ile "order-service" mikroservisine yönlendirilecektir.

spring.cloud.gateway.routes[1].predicates[0]=Path=/api/order
# Bu rota, gelen isteklerin "/api/order" yoluna uymas? durumunda etkinle?ir.

## Discover Server Route
spring.cloud.gateway.routes[2].id=discovery-server
# Üçüncü rota tan?m? için bir kimlik (id) belirleniyor; bu örnekte "discovery-server".

spring.cloud.gateway.routes[2].uri=http://localhost:8761
# Bu rota, do?rudan "localhost:8761" URL'sine yönlendirilecektir; yani Eureka sunucusuna.

spring.cloud.gateway.routes[2].predicates[0]=Path=/eureka/web
# Bu rota, gelen isteklerin "/eureka/web" yoluna uymas? durumunda etkinle?ir.

spring.cloud.gateway.routes[2].filters[0]=SetPath=/
# Bu filtre, "/eureka/web" iste?ini al?p onu kök dizine ("/") yönlendirir; bu sayede istek, do?rudan Eureka sunucusuna iletilmi? gibi görünür.

## Discover Server Static Resources Route
spring.cloud.gateway.routes[3].id=discovery-server-static
# Dördüncü rota tan?m? için bir kimlik (id) belirleniyor; bu örnekte "discovery-server-static".

spring.cloud.gateway.routes[3].uri=http://localhost:8761
# Bu rota, do?rudan "localhost:8761" URL'sine yönlendirilecektir; yani Eureka sunucusuna.

spring.cloud.gateway.routes[3].predicates[0]=Path=/eureka/**
# Bu rota, gelen isteklerin "/eureka/" ile ba?layan herhangi bir yola uymas? durumunda etkinle?ir.
spring.security.oauth2.resourceserver.jwt.issuer-uri=http://localhost:8181/realms/spring-boot-microservice-realm

## Inventory Service Route
spring.cloud.gateway.routes[4].id=inventory-service
# Dördüncü rota tan?m? için bir kimlik (id) belirleniyor; bu örnekte "inventory-service".

spring.cloud.gateway.routes[4].uri=lb://inventory-service
# Bu rota, yük dengeleme (load balancing) ile "inventory-service" mikroservisine yönlendirilecektir.

spring.cloud.gateway.routes[4].predicates[0]=Path=/api/inventory/**
# Bu rota, gelen isteklerin "/api/inventory" yoluna uymas? durumunda etkinle?ir.

# Tüm isteklerin izlenmesini sa?lar (her istek için izleme olasiligi %100)
management.tracing.sampling.probability=1.0

management.zipkin.tracing.endpoint=http://localhost:9411
