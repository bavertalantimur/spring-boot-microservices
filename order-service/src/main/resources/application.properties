# Uygulama ayarlar?
# Uygulaman?n ad? order-service olarak belirleniyor.
spring.application.name=order-service

# Veri taban? ayarlar?
# MySQL veritaban? için JDBC sürücüsünün s?n?f ad?.
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
# Hibernate'in MySQL ile çal??abilmesi için kullan?lacak SQL dilini belirtiyor.
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQLDialect
# Hibernate'in veritaban? tablolar?n? otomatik olarak güncellemesini sa?l?yor.
spring.jpa.hibernate.ddl-auto=update
# Ba?lan?lacak MySQL veritaban?n?n URL'si.
spring.datasource.url=jdbc:mysql://localhost:3306/order-service
# Veritaban?na ba?lanmak için kullan?lacak kullan?c? ad?.
spring.datasource.username=root
# Veritaban?na ba?lanmak için kullan?lacak kullan?c? ad?.
spring.datasource.password=
server.port=8081
# Eureka ayarlar?
# Uygulaman?n Eureka sunucusuna kaydolabilmesi için gerekli URL.
eureka.client.serviceUrl.defaultZone=http://eureka:password@localhost:8761/eureka

# Yönetim ve sa?l?k kontrol ayarlar?

# Circuit Breaker sa?l?k göstergelerinin yönetim özelliklerini etkinle?tirir.
management.health.circuitbreakers.enabled=true
# Yönetim uç noktalar?n?n hepsinin web üzerinden eri?ilebilir olmas?n? sa?lar.
management.endpoints.web.exposure.include=*
# Sa?l?k kontrol sonuçlar?n?n detaylar?n?n her zaman gösterilmesini sa?lar.
management.endpoint.health.show-details=always
# Resilience4J Ayarlar? (Circuit Breaker)

# inventory circuit breaker için sa?l?k göstergesinin kaydedilmesini sa?lar.
resilience4j.circuitbreaker.instances.inventory.registerHealthIndicator=true

# inventory circuit breaker için olay tüketici tampon boyutunu belirler.
resilience4j.circuitbreaker.instances.inventory.event-consumer-buffer-size=10

# Kayd?rmal? pencere türünü belirler (istek say?s?na dayal?).
resilience4j.circuitbreaker.instances.inventory.slidingWindowType=COUNT_BASED

#Kayd?rmal? pencere boyutunu belirler (son 5 iste?i de?erlendirir).
resilience4j.circuitbreaker.instances.inventory.slidingWindowSize=5

# Basar?s?zl?k oran? %50'yi geçerse circuit breaker aç?l?r.
resilience4j.circuitbreaker.instances.inventory.failureRateThreshold=50
# Circuit breaker aç?ld???nda 5 saniye bekler.
resilience4j.circuitbreaker.instances.inventory.waitDurationInOpenState=5s

#Yar? aç?k durumda 3 istek yap?lmas?na izin ve
resilience4j.circuitbreaker.instances.inventory.permittedNumberOfCallsInHalfOpenState=3

resilience4j.timelimiter.instances.inventory.timeout-duration=30s

resilience4j.retry.instances.inventory.max-attempts=3
resilience4j.retry.instances.inventory.wait-duration=5s


# Tüm isteklerin izlenmesini sa?lar (her istek için izleme olasiligi %100)
management.tracing.sampling.probability=1.0
management.zipkin.tracing.endpoint=http://localhost:9411



spring.kafka.bootstrap-servers=localhost:9092
spring.kafka.template.default-topic=notificationTopic
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer
spring.kafka.producer.properties.spring.json.type.mapping=event:com.talantimur.order_service.event.OrderPlacedEvent